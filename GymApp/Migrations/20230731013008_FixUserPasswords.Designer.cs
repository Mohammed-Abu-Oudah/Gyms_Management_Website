// <auto-generated />
using System;
using GymApp.ContextsAndFlunetAPIs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230731013008_FixUserPasswords")]
    partial class FixUserPasswords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymApp.Data.Gym", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GymCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GymCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GymName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GymStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gym");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ad3cd46-880d-4412-8a1d-6c71399fe4c0"),
                            GymCity = "Gaza",
                            GymCountry = "Palestine",
                            GymName = "Golds Gym",
                            GymStreet = "AlRemal street"
                        });
                });

            modelBuilder.Entity("GymApp.Data.TrainingPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaloriesToConsume")
                        .HasColumnType("int");

                    b.Property<int>("NumOfTrainingDaysPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("NumOfTrainingHours")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlanId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("GymApp.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("e6e93ba2-161a-4568-97ba-d8e9931f9ce8");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComputedColumnSql("[UserFirstName] + ', ' + [UserMiddleName] + ', ' + [UserLastName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComputedColumnSql("[ResidenceCountry] + '/' + [ResidenceCity] + '/' + [ResidenceStreet]");

                    b.Property<Guid?>("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResidenceCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidenceCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidenceStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComputedColumnSql("[Email]");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "167af088-83bf-4770-b2e7-90bcab44a837",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9798a3de-0794-475d-9309-4e0a5d7cf3cb",
                            Email = "medo.doood2211@gmail.com",
                            EmailConfirmed = false,
                            IdNumber = "406959007",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN0w88jfocgDr3waiyj80XyuasthXNTQ9IYL0ViCsGpjTITO9DnN8KmRBn9y2J568A==",
                            PhoneNumber = "0592724313",
                            PhoneNumberConfirmed = false,
                            ResidenceCity = "Khanyounis",
                            ResidenceCountry = "Palestine",
                            ResidenceStreet = "Osama street",
                            SecurityStamp = "a02cf68f-b610-4593-a1c0-1e3d6fef6ee1",
                            TwoFactorEnabled = false,
                            UserFirstName = "Mohammed",
                            UserLastName = "Abu-Oudah",
                            UserMiddleName = "Farid"
                        },
                        new
                        {
                            Id = "517ef1d8-6ae9-417e-a50b-43393c317efa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e1389d4-af4a-4f79-8198-e9f3416f627d",
                            Email = "aslgkajsldg@gmail.com",
                            EmailConfirmed = false,
                            GymId = new Guid("7ad3cd46-880d-4412-8a1d-6c71399fe4c0"),
                            IdNumber = "2354324356",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPbH7nslzidjLZpUr3ue89qd+no9zfAR4D31uZJ5yDYMxstEtPd2tJyi9JZ1eAOA/g==",
                            PhoneNumber = "8345389634",
                            PhoneNumberConfirmed = false,
                            ResidenceCity = "Khanyounis",
                            ResidenceCountry = "Palestine",
                            ResidenceStreet = "Osama street",
                            SecurityStamp = "68019e75-35af-4821-a32d-031de75ccf0c",
                            TwoFactorEnabled = false,
                            UserFirstName = "Ahmed",
                            UserLastName = "Elgendy",
                            UserMiddleName = "Khaled"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79d54256-912f-43fd-a014-38c007b8777e",
                            ConcurrencyStamp = "c1fd55bb-98bd-4a12-a409-c6ce258c8788",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "ab88a4ed-ba01-4f69-b1a3-9c1a8ebeea6b",
                            ConcurrencyStamp = "fac8f4b9-39bf-45e1-bf47-570c7c32d53b",
                            Name = "GymAdmin",
                            NormalizedName = "GYMADMIN"
                        },
                        new
                        {
                            Id = "b4537842-50de-4734-a878-00e1b3a5639c",
                            ConcurrencyStamp = "394f5dcd-f51c-4b70-9a22-2024c7c55522",
                            Name = "Trainer",
                            NormalizedName = "TRAINER"
                        },
                        new
                        {
                            Id = "0d816df9-a2b3-4a6b-a111-69ce4a5d1332",
                            ConcurrencyStamp = "bd705754-ead4-4ce5-ac4c-3b5ff9130a55",
                            Name = "Trainee",
                            NormalizedName = "TRAINEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "167af088-83bf-4770-b2e7-90bcab44a837",
                            RoleId = "79d54256-912f-43fd-a014-38c007b8777e"
                        },
                        new
                        {
                            UserId = "517ef1d8-6ae9-417e-a50b-43393c317efa",
                            RoleId = "ab88a4ed-ba01-4f69-b1a3-9c1a8ebeea6b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymApp.Data.TrainingPlan", b =>
                {
                    b.HasOne("GymApp.Data.User", "User")
                        .WithOne("TrainingPlan")
                        .HasForeignKey("GymApp.Data.TrainingPlan", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymApp.Data.User", b =>
                {
                    b.HasOne("GymApp.Data.Gym", "Gym")
                        .WithMany("Users")
                        .HasForeignKey("GymId");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GymApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GymApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GymApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymApp.Data.Gym", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GymApp.Data.User", b =>
                {
                    b.Navigation("TrainingPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
